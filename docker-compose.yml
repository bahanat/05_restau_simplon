services:
  my-postgres:
    image: postgres:15.6
    container_name: mypg
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - mynet
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 2s
      retries: 15

  db-init:
    build:
      context: .
      dockerfile: app/db/scripts/Dockerfile.init
    container_name: db-init
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - mynet
    depends_on:
      my-postgres:
        condition: service_healthy
    restart: "no"

  fakedata:
    build:
      context: .
      dockerfile: app/db/scripts/Dockerfile.data
    container_name: myfakedata
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - mynet
    depends_on:
      db-init:
        condition: service_completed_successfully
    restart: "no"

  api:
    build:
      context: .
      dockerfile: app/Dockerfile.api
    container_name: myapi
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - mynet
    ports:
      - "8000:8000"
    depends_on:
      fakedata:
        condition: service_completed_successfully

volumes:
  pgdata:

networks:
  mynet:
    driver: bridge
