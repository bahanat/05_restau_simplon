services:
  my-test-postgres:
    image: postgres:15.6
    environment:
      - POSTGRES_USER=${TEST_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}
      - POSTGRES_DB=${TEST_POSTGRES_DB}
      - POSTGRES_HOST=${TEST_POSTGRES_HOST}
      - POSTGRES_PORT=${TEST_POSTGRES_PORT}
    networks:
      - mytestnet
    volumes:
      - pgdata_testdb:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER} -d ${TEST_POSTGRES_DB} -h ${TEST_POSTGRES_HOST}"]
      interval: 2s
      retries: 15
      start_period: 30s


  db-init:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - POSTGRES_USER=${TEST_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}
      - POSTGRES_DB=${TEST_POSTGRES_DB}
      - POSTGRES_HOST=${TEST_POSTGRES_HOST}
      - POSTGRES_PORT=${TEST_POSTGRES_PORT}
    networks:
      - mytestnet
    depends_on:
      my-test-postgres:
        condition: service_healthy
    command: >
      sh -c "python -m app.db.scripts.init && 
             python -m app.db.scripts.fake_data"


  tests:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - POSTGRES_USER=${TEST_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}
      - POSTGRES_DB=${TEST_POSTGRES_DB}
      - POSTGRES_HOST=${TEST_POSTGRES_HOST}
      - POSTGRES_PORT=${TEST_POSTGRES_PORT}
    networks:
      - mytestnet
    depends_on:
      db-init:
        condition: service_completed_successfully
    command: >
      sh -c "pytest -vv --maxfail=1"


networks:
  mytestnet:
    driver: bridge

volumes:
  pgdata_testdb:
